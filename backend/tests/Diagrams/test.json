{
  "d2_test_prompts": [
    {
      "id": 1,
      "name": "Basic Hierarchy and Flow",
      "description": "Generate a **D2 diagram** showing a simple system where a User accesses a Web Server, which then connects to two separate Database clusters, 'Primary' and 'Backup'. Place the two databases inside a container labeled 'Data Tier'.",
      "tests": [
        "Object Definition",
        "Relationships",
        "Hierarchy/Containment"
      ]
    },
    {
      "id": 2,
      "name": "Layout and Missing Connector Type",
      "description": "Generate a **D2 diagram** of a flow where 'API Gateway' forwards requests to a 'Microservice A' or 'Microservice B'. Show a relationship between Microservice B and a 'Shared Cache'. The whole flow should be displayed horizontally, but tell me what kind of connection I should use between the Microservices and the Shared Cache.",
      "tests": [
        "Ambiguity Handling (Rule 2)",
        "Layout Attribute (Horizontal)"
      ]
    },
    {
      "id": 3,
      "name": "Complex Attributes and Styling",
      "description": "Generate a **D2 diagram**. Define three components: 'Frontend', 'Backend', and 'Auth Service'. Make 'Auth Service' a circle shape with a blue fill. Show 'Frontend' connecting to 'Backend' and 'Backend' connecting to 'Auth Service' with a label 'Token Check'.",
      "tests": [
        "Attributes/Styling (Shape, Fill)",
        "Labeled Edges"
      ]
    },
    {
      "id": 4,
      "name": "Ambiguous Naming and External Entity",
      "description": "Generate a **D2 diagram** modeling a high-level system where 'User' interacts with the main 'App', and the 'App' needs to access a 'Storage'. Should the 'App' and 'Storage' be in the same container, or should I represent 'Storage' as an external cloud icon?",
      "tests": [
        "Ambiguity Handling (Rule 2)",
        "Inference/Default Shape"
      ]
    },
    {
      "id": 5,
      "name": "Multi-Dimensional Containment and Relationship",
      "description": "Generate a **D2 diagram** with two main containers, 'Development' and 'Production'. Inside 'Development', put a 'Test Server' that connects directly to a 'Database Instance' located inside the 'Production' container. Label the connection 'Deployment Pipeline'.",
      "tests": [
        "Nested Containers",
        "Cross-Container Relationships"
      ]
    }
  ],
  "mermaid_test_prompts": [
    {
      "id": 1,
      "name": "Sequence Diagram and Delineation",
      "description": "Generate a **Mermaid Sequence Diagram** illustrating a user logging in. The user interacts with the 'Browser', which sends a request to the 'API Gateway', which checks the 'Authentication Service'. Show the steps clearly separated with blank lines.",
      "tests": [
        "Correct Diagram Type (sequenceDiagram)",
        "Structural Delineation (Rule 3)"
      ]
    },
    {
      "id": 2,
      "name": "Flowchart with Decision",
      "description": "Generate a **Mermaid flowchart**. Start with 'Start Process'. Move to a decision node labeled 'Is Data Valid?'. If yes, proceed to 'Save Data'. If no, loop back to 'Send Error Alert'.",
      "tests": [
        "Correct Diagram Type (graph TD)",
        "Flow Logic/Decision Node"
      ]
    },
    {
      "id": 3,
      "name": "Class Diagram",
      "description": "Generate a **Mermaid Class Diagram** showing three classes: 'Animal', 'Dog', and 'Cat'. 'Dog' and 'Cat' should inherit from 'Animal'. The 'Animal' class has a method 'move()'. The 'Dog' class has a method 'bark()'. Show the inheritance relationship.",
      "tests": [
        "Correct Diagram Type (classDiagram)",
        "Inheritance Syntax"
      ]
    },
    {
      "id": 4,
      "name": "Graph Direction and Ambiguity",
      "description": "Generate a **Mermaid diagram** modeling the structure of a company with three divisions: 'Sales', 'Marketing', and 'Product'. Product sends requirements to Marketing, and Marketing supports Sales. What kind of relationship should I use between the divisions: simple arrows or double arrows?",
      "tests": [
        "Ambiguity Handling (Rule 2)",
        "Relationship Type Choice"
      ]
    },
    {
      "id": 5,
      "name": "Gantt Chart",
      "description": "Generate a **Mermaid Gantt chart** for a project with two sections: 'Planning' and 'Development'. 'Planning' has one task 'Research' lasting 3 days. 'Development' has 'Coding' lasting 5 days, starting immediately after 'Research' ends.",
      "tests": [
        "Correct Diagram Type (gantt)",
        "Non-Flowchart Syntax (Gantt specific)"
      ]
    }
  ],
  "c4_test_prompts": [
    {
      "id": 1,
      "name": "System Context Diagram (C1)",
      "description": "Generate a **C4 Context Diagram** showing the 'Payment Processing System' that interacts with the 'Customer' and an external 'Bank API'. Show the 'Customer' using the system and the system exchanging data with the 'Bank API'.",
      "tests": [
        "C1: System Context Level",
        "External Boundary Visualization"
      ]
    },
    {
      "id": 2,
      "name": "Container Diagram (C2)",
      "description": "Generate a **C4 Container Diagram** decomposing the 'Customer Portal' system (from the previous prompt). Show it consists of a 'Web Application' (Node.js), a 'Mobile App', and a 'PostgreSQL Database'. Show the relationship between them.",
      "tests": [
        "C2: Container Level",
        "Technology and Component Identification"
      ]
    },
    {
      "id": 3,
      "name": "Component Diagram (C3)",
      "description": "Generate a **C4 Component Diagram** showing the internal components of the 'Web Application' (from the previous prompt). Include 'Authentication Service', 'Payment Gateway Adapter', and 'API Controller'. Show how the 'API Controller' uses the other two services.",
      "tests": [
        "C3: Component Level",
        "Internal Component Flow"
      ]
    },
    {
      "id": 4,
      "name": "System Context (Testing Ambiguity Veto)",
      "description": "Generate a **C4 diagram** modeling a system named 'Order Service'. It interacts with an 'Inventory' system and a 'Shipping' system. It also sends 'Alerts'. Should 'Alerts' be an external system or an internal component of 'Order Service'?",
      "tests": [
        "Ambiguity Handling (Rule 2)",
        "C1/C2 Boundary Check"
      ]
    },
    {
      "id": 5,
      "name": "Flow and Technology (Testing Relationships)",
      "description": "Generate a **C4 Container Diagram** where the 'User' accesses the 'Load Balancer' over HTTPS. The 'Load Balancer' distributes traffic to three 'Application Servers'. The Application Servers read data from a 'Redis Cache' and write to a 'SQL Database'.",
      "tests": [
        "C2: Container Level",
        "Explicit Technology/Protocol on Edges"
      ]
    }
  ]
}