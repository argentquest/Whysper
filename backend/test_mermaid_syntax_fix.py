"""
Test script to verify Mermaid syntax fixes work correctly
"""

import asyncio
import sys
import os

# Add the backend directory to the path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from mvp_diagram_generator.renderer_v2 import render_diagram

# Test problematic Mermaid code that might be generated by AI
PROBLEMATIC_MERMAID_CODE = """A: [Start]
A --> B: [Process]
B --> C: [End]"""

# Test corrected Mermaid code
CORRECTED_MERMAID_CODE = """flowchart TD
    A[Start] --> B[Process]
    B --> C[End]"""

# Test another problematic case - missing diagram type
MISSING_DIAGRAM_TYPE = """A[Start] --> B[Process]
B --> C[End]"""

# Test sequence diagram issues
SEQUENCE_DIAGRAM_ISSUES = """participant User
participant System
User -> System: Request
System --> User: Response"""

async def test_mermaid_rendering():
    """Test both problematic and corrected Mermaid code"""
    
    print("üß™ Testing Mermaid Diagram Rendering Fixes")
    print("=" * 50)
    
    # Test 1: Problematic code with colons (should fail or be corrected)
    print("\n1Ô∏è‚É£ Testing problematic Mermaid code (with colons)...")
    try:
        result1 = await render_diagram(PROBLEMATIC_MERMAID_CODE, "mermaid", "svg")
        print("‚úÖ Problematic code rendered successfully!")
        print(f"   SVG length: {len(result1)} characters")
    except Exception as e:
        print(f"‚ùå Problematic code failed: {e}")
    
    # Test 2: Corrected code (should work)
    print("\n2Ô∏è‚É£ Testing corrected Mermaid code...")
    try:
        result2 = await render_diagram(CORRECTED_MERMAID_CODE, "mermaid", "svg")
        print("‚úÖ Corrected code rendered successfully!")
        print(f"   SVG length: {len(result2)} characters")
        
        # Save the successful result to a file for verification
        with open("test_mermaid_output.svg", "w") as f:
            f.write(result2)
        print("   üìÑ Saved output to test_mermaid_output.svg")
        
    except Exception as e:
        print(f"‚ùå Corrected code failed: {e}")
    
    # Test 3: Missing diagram type (should be auto-corrected)
    print("\n3Ô∏è‚É£ Testing Mermaid code without diagram type...")
    try:
        result3 = await render_diagram(MISSING_DIAGRAM_TYPE, "mermaid", "svg")
        print("‚úÖ Missing diagram type code rendered successfully!")
        print(f"   SVG length: {len(result3)} characters")
    except Exception as e:
        print(f"‚ùå Missing diagram type code failed: {e}")
    
    # Test 4: Sequence diagram (should work)
    print("\n4Ô∏è‚É£ Testing sequence diagram...")
    try:
        result4 = await render_diagram(SEQUENCE_DIAGRAM_ISSUES, "mermaid", "svg")
        print("‚úÖ Sequence diagram rendered successfully!")
        print(f"   SVG length: {len(result4)} characters")
    except Exception as e:
        print(f"‚ùå Sequence diagram failed: {e}")
    
    print("\nüéØ Test completed!")

if __name__ == "__main__":
    asyncio.run(test_mermaid_rendering())